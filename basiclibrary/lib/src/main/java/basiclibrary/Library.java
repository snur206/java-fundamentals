/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.HashSet;
import java.util.Random;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    // Rolling Dice
    public int[] roll(int n) {
        Random rand = new Random();
        int[] diceRoll = new int[n];
        for (int i = 0; i < n; i++) {
            int randNum = rand.nextInt(6);
            diceRoll[i] = randNum + 1;
        }
        return diceRoll;
    }

    // Contains Duplicates
    public boolean containsDuplicates(int[] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 1; j < array.length; j++) {
                if (i == j) continue;
                if (array[i] == array[j])
                    return true;
            }
        }
        return false;
    }

    // Calculating Averages
    public static int calculateAverage(int[] arrayOfValues){
        int sum = 0;
        int arrayLength = arrayOfValues.length;
        // FOR LOOP
        for (int i = 0; i < arrayOfValues.length; i++) {
            // every iteration we add value to sum
            sum = sum + arrayOfValues[i];
        }
        // sum of all values / length of array
        return sum/arrayLength;
    }

    // Arrays of Arrays
    public static int[] lowestAverageArray(int[][] weeklyMonthTemperatures){
        int[] lowestAverageArray = weeklyMonthTemperatures[0];
        int lowestAverage = calculateAverage(weeklyMonthTemperatures[0]);
        for (int i = 0; i < weeklyMonthTemperatures.length; i++) {
            int currentArrayAverage = calculateAverage(weeklyMonthTemperatures[i]);
            if(currentArrayAverage < lowestAverage){
                lowestAverageArray = weeklyMonthTemperatures[i];
            }
        }
        return lowestAverageArray;
    }

    // Analyzing Weather Data
    public static String weather(int[] [] arr) {
        String result = "";
        int highTemp = arr[0][0];
        int lowTemp = arr[0][0];
        HashSet<Integer> weatherData = new HashSet<>();
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] > highTemp)
                    highTemp = arr[i][j];
                if (arr[i][j] < lowTemp)
                    lowTemp = arr[i][j];
                weatherData.add(arr[i][j]);
            }
        }
        System.out.println("High: " + highTemp);
        System.out.println("Low: " + lowTemp);
        for (int i = lowTemp; i < highTemp; i++) {
            if (weatherData.contains(i))
                result += i + " ";
            else System.out.println("Never saw temperature: " + i);
        }
        return result;
    }
    public static String tally (List<String> arr) {

        HashMap<String, Integer> votes = new HashMap<>();
        int numVotes = 0;
        String elected = "";

        for (String vote : arr) {
            if (votes.containsKey(vote)) {
                votes.put(vote, votes.get(vote) + 1);

            } else {
                votes.put(vote, 0);
            }
            for (String candidate : arr) {
                if(votes.get(vote) > numVotes) {
                    numVotes = votes.get(vote);
                    elected = vote;
                }
            }

        }
        return elected;
    }
    }

